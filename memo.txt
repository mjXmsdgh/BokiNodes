リアルタイム財務諸表 作成計画
いきなり完璧なものを作るのではなく、段階的に機能を育てていくアプローチがおすすめです。

フェーズ1: 基礎設計とデータ準備
目的: 財務諸表を作るために必要な「情報」をデータモデルに追加し、計算の土台を整える。

勘定科目に「分類」を追加する

現状の課題: 今のAccount（勘定科目）データには、「現金」や「売上」という名前はあっても、それが「資産」なのか「収益」なのか、コンピュータは判断できません。
やること:
Accountリソースの設計を見直し、「これはどの財務諸表の、どのグループに属するか？」という情報（例: categoryプロパティ）を追加します。
分類は、簿記の基本である5大要素「資産、負債、純資産、収益、費用」を使います。
既存の勘定科目データ（現金、借入金、資本金など）すべてに、この新しい分類情報を設定します。
例: 「現金」→ 資産、「借入金」→ 負債、「売上」→ 収益
財務諸表のレイアウトを考える

やること:
いきなりGodot上で作り始めるのではなく、まず紙やデザインツールで簡単なワイヤーフレーム（骨組み図）を描きます。
どこに表示するか？ 画面の右端？下部？常に表示しておくか、ボタンで表示/非表示を切り替えるか？
何を表示するか？ 最初はごくシンプルにしましょう。
貸借対照表(B/S):
資産合計: ￥〇〇
負債合計: ￥〇〇
純資産合計: ￥〇〇
（貸借一致の確認: 資産合計 = 負債合計 + 純資産合計）
損益計算書(P/L):
収益合計: ￥〇〇
費用合計: ￥〇〇
当期純利益: ￥〇〇 (収益 - 費用)
フェーズ2: 静的な表示の実装
目的: まずは「ある一時点」の財務諸表を正しく表示できるようにする。まだリアルタイムで動かなくてOK。

集計ロジックを考える
 
やること:
「どうやって各勘定科目の残高を合計して、B/SやP/Lの数値を作るか」という計算ルールを考えます。
 このロジックは、財務諸表専用の新しいシングルトンノード `FinancialStatementManager` (Node) を作成し、そこに持たせるのが責務分離の観点から適切です。
 `FinancialStatementManager` は、`Ledger` シングルトンにアクセスして、すべての勘定科目データを取得します。
計算ルールの例:
 `FinancialStatementManager` が `Ledger` から全勘定科目のリストを取得し、ループ処理する。
フェーズ1で追加したcategoryが「資産」のものの残高を全部足して、「資産合計」を算出する。
同様に、「負債」「純資産」「収益」「費用」もそれぞれ合計する。
「当期純利益」を計算する（収益合計 - 費用合計）。
重要: B/Sの「純資産合計」には、この「当期純利益」も含まれることを考慮します。（純資産 = 元々の純資産 + 当期純利益）
UIを作成し、数値を表示する

やること:
 `ノード構成.txt` にある `UI (CanvasLayer)` ノードの子として、財務諸表を表示するための新しいUIシーン `FinancialStatementPanel.tscn` を追加します。
 `FinancialStatementPanel` は `PanelContainer` をルートとし、内部に `VBoxContainer` や `Label` を配置してレイアウトを組みます。
 `FinancialStatementManager` が集計ロジックを実行し、その結果を `FinancialStatementPanel` が持つ `Label` に表示させる処理を実装します。
この時点では、取引をしても数値はまだ更新されません。まずは表示されることだけを目指します。
フェーズ3: リアルタイム更新の実装
目的: 取引アニメーションと連動して、財務諸表の数値がリアルタイムで変化するようにする。BokiNodesの体験が飛躍的に向上する核心部分です。

更新の「きっかけ」を接続する

現状の仕組み: `Ledger` は取引を実行すると `account_updated` シグナルを発行しています。これは「勘定科目の残高が変わったよ！」という合図です。
やること:
 `FinancialStatementManager` が、`Ledger` の `account_updated` シグナルを受け取れるように接続（connect）します。
 シグナルを受け取ったら、`FinancialStatementManager` は再度「集計ロジック」を実行し、計算結果を更新します。
 `FinancialStatementManager` は、計算結果が更新されたことを示す独自のシグナル（例: `statements_updated`）を発行し、`FinancialStatementPanel` はそのシグナルを受け取って `Label` の表示を更新します。
変化を分かりやすくする演出を追加する（オプション）

やること:
数値がただ切り替わるだけだと、どこが変化したか見逃しがちです。
数値が更新されたLabelを、一瞬だけ光らせたり、色を変えたり、少しだけ大きくしたりする簡単なアニメーションを追加します。
これにより、「ああ、現金が減って、資産合計がこう変わったのか！」という繋がりが、より直感的に理解できるようになります。
フェーズ4: 詳細化と改善
目的: シンプルな財務諸表を、より実践的な形式に近づけていく。

階層構造の導入

やること:
「資産合計」だけでなく、その内訳である「流動資産」「固定資産」などを表示できるようにします。
そのためには、フェーズ1で追加したcategoryを、より詳細なもの（例: 資産 > 流動資産）に拡張する必要があります。
UIも、インデント（字下げ）を使って階層構造を表現できるように改良します。
キャッシュ・フロー計算書(C/F)の検討

やること:
B/S、P/Lに慣れてきたユーザーのために、第3の財務諸表であるキャッシュ・フロー計算書（現金の動きだけに着目した表）の追加を検討します。これは上級者向けの機能になります。
この計画に沿って進めることで、無理なく、しかし着実に「リアルタイム財務諸表」という魅力的な機能を実現できるはずです。まずはフェーズ1の「勘定科目の分類」から手をつけるのが良いスタートになるでしょう。頑張ってください！